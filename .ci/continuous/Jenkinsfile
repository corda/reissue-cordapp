@Library('existing-build-control')
import static com.r3.build.BuildControl.killAllExistingBuildsForJob
import com.r3.build.utils.GitUtils
import groovy.transform.Field

killAllExistingBuildsForJob(env.JOB_NAME, env.BUILD_NUMBER.toInteger())

@Field
GitUtils gitUtils = new GitUtils(this)

pipeline {
    agent {
        dockerfile {
            filename '.ci/Dockerfile'
            additionalBuildArgs "--build-arg USER=stresstester"
            args '-v /var/run/docker.sock:/var/run/docker.sock --group-add 999'
        }
    }
    options { timestamps() }

    environment {
        EXECUTOR_NUMBER = "${env.EXECUTOR_NUMBER}"
        LOOPBACK_ADDRESS = "172.17.0.1"
        ARTIFACTORY_CREDENTIALS = credentials('artifactory-credentials')
        DOCKER_CREDENTIALS = credentials('docker-for-oracle-login')
        SNYK_TOKEN = credentials('c4-ent-snyk-api-token-secret')
        C4_ENT_SNYK_ORG_ID = credentials('c4-ent-snyk-org-id')
        GRADLE_USER_HOME = "/host_tmp/gradle"
    }

    stages {

        stage("Auth Docker for Oracle Images") {
            steps {
                sh '''
                    docker login --username ${DOCKER_CREDENTIALS_USR} --password ${DOCKER_CREDENTIALS_PSW}
                   '''
            }
        }

        stage('Tests') {
            steps {
                timeout(30) {
                    sh '''
                    export CORDA_ARTIFACTORY_USERNAME=\"\${ARTIFACTORY_CREDENTIALS_USR}\"
                    export CORDA_ARTIFACTORY_PASSWORD=\"\${ARTIFACTORY_CREDENTIALS_PSW}\"
                    ./gradlew clean test --info
                    '''
                }
            }
        }

        stage('Snyk Security') {
            // when {
            //     expression { gitUtils.isReleaseTag() || gitUtils.isReleaseCandidate() || gitUtils.isReleaseBranch() }
            // }
            steps {
                script {
                    def modulesToScan = ['dummy_contracts', 'dummy_workflows', 'contracts', 'workflows']
                    modulesToScan.each { module ->
                        snykSecurityScan(env.SNYK_TOKEN, "--sub-project=$module --configuration-matching='^runtimeClasspath\$' --prune-repeated-subdependencies --debug --target-reference='${env.BRANCH_NAME}' --project-tags=Branch='${env.BRANCH_NAME.replaceAll("[^0-9|a-z|A-Z]+","_")}'", false, true)
                    }
                }
            }
        }

        stage('Publish SNAPSHOT') {
            steps {
                sh '''#!/bin/bash
                        export CORDA_ARTIFACTORY_USERNAME=\"\${ARTIFACTORY_CREDENTIALS_USR}\"
                        export CORDA_ARTIFACTORY_PASSWORD=\"\${ARTIFACTORY_CREDENTIALS_PSW}\"
                        VERSION="$(./gradlew properties --no-daemon --console=plain -q | grep "^version:" | awk '{printf $2}')"
                        if [[ $VERSION == *"SNAPSHOT"* ]]; then
                            echo "Building a SNAPSHOT"
                           ./gradlew artifactoryPublish -PpublishRepo="corda-lib-dev"
                        fi
                    '''
            }
        }
    }

    post {
        always {
            junit '**/build/test-results/**/*.xml'
        }
        cleanup {
            deleteDir() /* clean up our workspace */
        }
    }
}
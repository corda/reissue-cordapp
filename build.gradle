import static org.gradle.api.JavaVersion.VERSION_17

buildscript { //properties that you need to build the project

    ext {
        test_module_opens = [
                '--add-opens', 'java.base/java.time=ALL-UNNAMED', '--add-opens', 'java.base/java.io=ALL-UNNAMED',
                '--add-opens', 'java.base/java.util=ALL-UNNAMED', '--add-opens', 'java.base/java.net=ALL-UNNAMED',
                '--add-opens', 'java.base/java.nio=ALL-UNNAMED', '--add-opens', 'java.base/java.lang.invoke=ALL-UNNAMED',
                '--add-opens', 'java.base/java.security.cert=ALL-UNNAMED', '--add-opens', 'java.base/java.security=ALL-UNNAMED',
                '--add-opens', 'java.base/javax.net.ssl=ALL-UNNAMED', '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
                '--add-opens', 'java.base/java.util.concurrent=ALL-UNNAMED', '--add-opens', 'java.sql/java.sql=ALL-UNNAMED',
                '--add-opens', 'java.base/java.util.concurrent.atomic=ALL-UNNAMED'
        ]
        test_module_exports = [
                '--add-exports', 'java.base/sun.nio.ch=ALL-UNNAMED'
        ]
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "${publicArtifactURL}/corda-releases" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
    }
}

plugins {
    id "org.ajoberstar.grgit" version "4.0.0"
}

// You can define this property in ~/.gradle/gradle.properties on your dev box.
if (! project.hasProperty('cordaArtifactoryUsername') || !ext.cordaArtifactoryUsername?.trim()) {
    ext.cordaArtifactoryUsername = System.getenv('CORDA_ARTIFACTORY_USERNAME')
            ?: System.getenv('ARTIFACTORY_USERNAME')
            ?: System.getProperty('corda.artifactory.username')
}

// You can define this property in ~/.gradle/gradle.properties on your dev box.
if (! project.hasProperty('cordaArtifactoryPassword') || !ext.cordaArtifactoryPassword?.trim()) {
    ext.cordaArtifactoryPassword = System.getenv('CORDA_ARTIFACTORY_PASSWORD')
            ?: System.getenv('ARTIFACTORY_PASSWORD')
            ?: System.getProperty('corda.artifactory.password')
}

// If the command line project option -PversionFromGit is added to the gradle invocation, we'll resolve
// the latest git commit hash and timestamp and create a version postfix from that
if (project.hasProperty("versionFromGit")) {
    ext.versionSuffix = "${grgit.head().dateTime.format("yyyyMMdd_HHmmss")}-${grgit.head().abbreviatedId}"
}

if (ext.versionSuffix != "") {
    ext.reissuance_version = "${ext.baseVersion}-${ext.versionSuffix}".toString()
} else {
    ext.reissuance_version = "${ext.baseVersion}".toString()
}

allprojects { //Properties that you need to implementation your project (The application)
    version "$reissuance_version"

    apply from: "${rootProject.projectDir}/repositories.gradle"
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'net.corda.plugins.quasar-utils'

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url "https://jitpack.io" }
        maven { url "${publicArtifactURL}/corda" }
        maven {
            url "${publicArtifactURL}/corda-lib"
            mavenContent {
                releasesOnly()
            }
        }
        maven { url "${publicArtifactURL}/corda-dependencies" }
        maven {
            url "${artifactoryContextUrl}/corda-dev"
            credentials {
                username = System.getenv('CORDA_ARTIFACTORY_USERNAME')
                password = System.getenv('CORDA_ARTIFACTORY_PASSWORD')
            }
        }
        maven {
            url "${artifactoryContextUrl}/corda-lib-dev"
            credentials {
                username = System.getenv('CORDA_ARTIFACTORY_USERNAME')
                password = System.getenv('CORDA_ARTIFACTORY_PASSWORD')
            }
        }
    }

    quasar {
        excludePackages.addAll(
                "antlr**",
                "com.codahale**",
                "com.fasterxml.**",
                "com.github.benmanes.caffeine.**",
                "com.google.**",
                "com.lmax.**",
                "com.zaxxer.**",
                "net.bytebuddy**",
                "io.github.classgraph**",
                "io.netty*",
                "liquibase**",
                "net.i2p.crypto.**",
                "nonapi.io.github.classgraph.**",
                "org.apiguardian.**",
                "org.bouncycastle**",
                "org.codehaus.**",
                "org.h2**",
                "org.hibernate**",
                "org.jboss.**",
                "org.objenesis**",
                "org.w3c.**",
                "org.xml**",
                "org.yaml**",
                "rx**",
                "kotlin**"
        )
    }

    test {
        jvmArgs test_module_opens
        jvmArgs test_module_exports
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions {
            languageVersion = "1.9"
            apiVersion = "1.9"
            jvmTarget = VERSION_17
            javaParameters = true   // Useful for reflection.
        }
    }

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }

    task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
        from javadoc.destinationDir
        archiveClassifier = 'javadoc'
    }

    task packageSources(type: Jar, dependsOn: 'classes') {
        from sourceSets.main.allSource
        archiveClassifier = 'sources'
    }

    artifacts {
        archives packageJavadoc
        archives packageSources
    }
}

apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'corda.root-publish'

cordapp {
    targetPlatformVersion corda_platform_version.toInteger()
    minimumPlatformVersion corda_platform_version.toInteger()
}

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

//Module dependencis
dependencies {
    // Corda dependencies.
    cordaProvided "$corda_release_group:corda-core:$corda_release_version"
    cordaRuntimeOnly "$corda_release_group:corda-node-api:$corda_release_version"
    cordaRuntimeOnly "$corda_release_group:corda:$corda_release_version"

    // CorDapp dependencies.
    cordapp project(":workflows")
    cordapp project(":contracts")
    cordapp project(":dummy_contracts")
    cordapp project(":dummy_workflows")

    cordaProvided "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    cordaProvided "org.apache.logging.log4j:log4j-web:${log4j_version}"
    cordaProvided "org.slf4j:jul-to-slf4j:$slf4j_version"

    // CI dependencies
    cordapp "$confidential_id_release_group:ci-workflows:$confidential_id_release_version"


    // Token SDK dependencies.
    cordapp "$tokens_release_group:tokens-contracts:$tokens_release_version"
    cordapp "$tokens_release_group:tokens-workflows:$tokens_release_version"
}

//Task to build the jar for ganache.
task ganache {
    subprojects {
        if (it.project.name != "clients") {
            dependsOn jar
            doLast {
                copy {
                    from "${buildDir}/libs"
                    into "${rootDir}/build/libs"
                }
            }
        }
    }
}

//Task to deploy the nodes in order to bootstrap a network
task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {

    /* This property will load the CorDapps to each of the node by default, including the Notary. You can find them
     * in the cordapps folder of the node at build/nodes/Notary/cordapps. However, the notary doesn't really understand
     * the notion of cordapps. In production, Notary does not need cordapps as well. This is just a short cut to load
     * the Corda network bootstrapper.
     */
    nodeDefaults {
        projectCordapp {
            deploy = false
        }

        cordapp "$tokens_release_group:tokens-contracts:$tokens_release_version"
        cordapp "$tokens_release_group:tokens-workflows:$tokens_release_version"

        cordapp "$confidential_id_release_group:ci-workflows:$confidential_id_release_version"

        cordapp project(':dummy_contracts')
        cordapp project(':dummy_workflows')
        cordapp project(':contracts')
        cordapp project(':workflows')

        runSchemaMigration = true
    }
    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating : false]
        p2pPort 10002
        rpcSettings {
            address("localhost:10003")
            adminAddress("localhost:10043")
        }
        extraConfig = ['custom.jvmArgs': ["-Xmx2G"]]
    }
    node {
        name "O=Issuer,L=London,C=GB"
        p2pPort 10005
        rpcSettings {
            address("localhost:10006")
            adminAddress("localhost:10046")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
        extraConfig = ['custom.jvmArgs': ["-Xmx2G"]]
    }
    node {
        name "O=Alice,L=New York,C=US"
        p2pPort 10008
        rpcSettings {
            address("localhost:10009")
            adminAddress("localhost:10049")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
        extraConfig = ['custom.jvmArgs': ["-Xmx2G"]]
    }
    node {
        name "O=Bob,L=San Francisco,C=US"
        p2pPort 10010
        rpcSettings {
            address("localhost:10011")
            adminAddress("localhost:10052")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
        extraConfig = ['custom.jvmArgs': ["-Xmx2G"]]
    }

}
